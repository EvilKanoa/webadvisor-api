// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema.js matches the schema snapshot 1`] = `
"\\"\\"\\"Information gathered from an institution's undergraduate calendar.\\"\\"\\"
type Academic_Calendar {
  \\"\\"\\"The institution which this calendar belongs to.\\"\\"\\"
  institution: School!

  \\"\\"\\"The year which this calendar represents.\\"\\"\\"
  year: String!

  \\"\\"\\"The \\"Disclaimer\\" section from the academic calendar.\\"\\"\\"
  disclaimer: Info_Section

  \\"\\"\\"The \\"Course Descriptions\\" section from the academic calendar.\\"\\"\\"
  courses: Course_Descriptions
}

\\"\\"\\"A course which includes all metadata and sections.\\"\\"\\"
type Course {
  \\"\\"\\"The course code, sometimes considered a course ID.\\"\\"\\"
  code: String!

  \\"\\"\\"The name of the course.\\"\\"\\"
  name: String

  \\"\\"\\"An institution provided description for the course.\\"\\"\\"
  description: String

  \\"\\"\\"The term which the course occurs during.\\"\\"\\"
  term: Term!

  \\"\\"\\"The course weight.\\"\\"\\"
  credits: Float

  \\"\\"\\"The institution which is offering the course.\\"\\"\\"
  institution: School!

  \\"\\"\\"The institution defined location of the course.\\"\\"\\"
  location: String

  \\"\\"\\"The institution defined academic level of the course.\\"\\"\\"
  level: String

  \\"\\"\\"An object representing the prerequisites required for the course.\\"\\"\\"
  prerequisites: Prerequisites

  \\"\\"\\"All sections offered for this course.\\"\\"\\"
  sections: [Section]
}

\\"\\"\\"Course description and information for a single course.\\"\\"\\"
type Course_Description {
  \\"\\"\\"The full course code.\\"\\"\\"
  code: String

  \\"\\"\\"The title of the course.\\"\\"\\"
  title: String

  \\"\\"\\"The original, unparsed, title from the course calendar.\\"\\"\\"
  rawTitle: String

  \\"\\"\\"List of semesters which this course is offered in.\\"\\"\\"
  semesters: [Semester]

  \\"\\"\\"The number of lecture hours expected every week.\\"\\"\\"
  lectureHours: String

  \\"\\"\\"The number of lab hours expected every week.\\"\\"\\"
  labHours: String

  \\"\\"\\"The credit weight of the course.\\"\\"\\"
  credits: String

  \\"\\"\\"The description of the course itself.\\"\\"\\"
  description: String

  \\"\\"\\"Information on when and how the course is offered.\\"\\"\\"
  offering: String

  \\"\\"\\"Information on the required prerequisite(s) for the course.\\"\\"\\"
  prerequisite: String

  \\"\\"\\"Information on courses which are equivalent to this one.\\"\\"\\"
  equate: String

  \\"\\"\\"Information on the restriction(s) that apply for the course.\\"\\"\\"
  restriction: String

  \\"\\"\\"The department(s) offering this course.\\"\\"\\"
  department: String
}

type Course_Description_Section {
  \\"\\"\\"The title of the department.\\"\\"\\"
  title: String

  \\"\\"\\"The prefix for course codes within this section.\\"\\"\\"
  code: String
  details: Course_Description_Section_Details
}

type Course_Description_Section_Details {
  \\"\\"\\"Extra information covering the whole section.\\"\\"\\"
  details: String

  \\"\\"\\"All current courses listed by this department.\\"\\"\\"
  courses: [Course_Description]
}

type Course_Descriptions {
  \\"\\"\\"General information pertaining to all course descriptions.\\"\\"\\"
  description: [Info_Section]

  \\"\\"\\"Each individual department offering courses.\\"\\"\\"
  sections: [Course_Description_Section]
}

\\"\\"\\"One of the seven days in a week.\\"\\"\\"
enum Day {
  \\"\\"\\"Monday\\"\\"\\"
  monday

  \\"\\"\\"Tuesday\\"\\"\\"
  tuesday

  \\"\\"\\"Wednesday\\"\\"\\"
  wednesday

  \\"\\"\\"Thursday\\"\\"\\"
  thursday

  \\"\\"\\"Friday\\"\\"\\"
  friday

  \\"\\"\\"Saturday\\"\\"\\"
  saturday

  \\"\\"\\"Sunday\\"\\"\\"
  sunday
}

\\"\\"\\"A title and description representing one info section.\\"\\"\\"
type Info_Section {
  \\"\\"\\"The title of this info section.\\"\\"\\"
  title: String

  \\"\\"\\"The content of this info section.\\"\\"\\"
  description: String
}

\\"\\"\\"
A recurring meeting for a given course section including where and when it takes place.
\\"\\"\\"
type Meeting {
  \\"\\"\\"The type of the meeting, or none if type is not known.\\"\\"\\"
  type: Meeting_Type

  \\"\\"\\"The name of the meeting if one is given.\\"\\"\\"
  name: String

  \\"\\"\\"The day which the meeting occurs.\\"\\"\\"
  day: Day

  \\"\\"\\"The start time of the meeting, stored as an ISO 8601 extended time.\\"\\"\\"
  start: String

  \\"\\"\\"The end time of the meeting, stored as an ISO 8601 extended time.\\"\\"\\"
  end: String

  \\"\\"\\"The number of available/free slots for the meeting.\\"\\"\\"
  available: Int

  \\"\\"\\"The total number of slots for the meeting.\\"\\"\\"
  capacity: Int

  \\"\\"\\"The location of the meeting.\\"\\"\\"
  location: String
}

\\"\\"\\"The type of a meeting.\\"\\"\\"
enum Meeting_Type {
  \\"\\"\\"Lecture\\"\\"\\"
  LEC

  \\"\\"\\"Lab\\"\\"\\"
  LAB

  \\"\\"\\"Seminar\\"\\"\\"
  SEM
}

\\"\\"\\"
A set of required courses which has the ability to represent a union of courses,
an intersection of courses, or a single course.
\\"\\"\\"
type Prerequisites {
  \\"\\"\\"A single course prerequisite.\\"\\"\\"
  only: String

  \\"\\"\\"One of the items in this list is required as a prereq.\\"\\"\\"
  any: [Prerequisites]

  \\"\\"\\"Every item in this list is required as a prereq.\\"\\"\\"
  all: [Prerequisites]
}

\\"\\"\\"
The base level query object used to access any and all API information. Have fun!
\\"\\"\\"
type Query {
  course(
    \\"\\"\\"The institution defined course code.\\"\\"\\"
    code: String!

    \\"\\"\\"The instiution that offers the course.\\"\\"\\"
    institution: School!

    \\"\\"\\"The term that the course occurs during.\\"\\"\\"
    term: Term!
  ): Course
  search(
    \\"\\"\\"The search term used to determine the search results.\\"\\"\\"
    query: String!

    \\"\\"\\"The term to search within.\\"\\"\\"
    term: Term!

    \\"\\"\\"The institution to search within.\\"\\"\\"
    institution: School!

    \\"\\"\\"
    Number of results to skip before returning, used for pagination in conjuction with limit.
    \\"\\"\\"
    skip: Int

    \\"\\"\\"
    Number of results to return before cutting off, used for pagination in conjuction with skip.
    \\"\\"\\"
    limit: Int
  ): Search
  calendar(
    \\"\\"\\"The institution to get the academic calendar for.\\"\\"\\"
    institution: School!

    \\"\\"\\"The year to get the calendar for, defaults to current year.\\"\\"\\"
    year: Int
  ): Academic_Calendar
}

\\"\\"\\"An entity matched during a search.\\"\\"\\"
type Result {
  \\"\\"\\"The code of a matching entity.\\"\\"\\"
  code: String!

  \\"\\"\\"Optional course data to be injected for the result.\\"\\"\\"
  course: Course
}

\\"\\"\\"One of the institutions available to query.\\"\\"\\"
enum School {
  \\"\\"\\"University of Guelph\\"\\"\\"
  UOG

  \\"\\"\\"University of Waterloo\\"\\"\\"
  UW

  \\"\\"\\"Wilfrid Laurier University\\"\\"\\"
  WLU
}

\\"\\"\\"A search for course codes.\\"\\"\\"
type Search {
  \\"\\"\\"The search term used to determine the search results.\\"\\"\\"
  query: String!

  \\"\\"\\"The term to search within.\\"\\"\\"
  term: Term!

  \\"\\"\\"The institution to search within.\\"\\"\\"
  institution: School!

  \\"\\"\\"The list of resulting courses.\\"\\"\\"
  results: [Result!]!

  \\"\\"\\"Number of results skipped from beginning of results.\\"\\"\\"
  skip: Int

  \\"\\"\\"Maximum number of results returned.\\"\\"\\"
  limit: Int
}

\\"\\"\\"A course section which defines registration and meetings.\\"\\"\\"
type Section {
  \\"\\"\\"The identifying string for the section, may not exist.\\"\\"\\"
  id: String

  \\"\\"\\"The faculty in charge of the section.\\"\\"\\"
  faculty: String

  \\"\\"\\"The number of available/free slots for the section.\\"\\"\\"
  available: Int

  \\"\\"\\"The total number of slots for the section.\\"\\"\\"
  capacity: Int

  \\"\\"\\"The meetings required for the section.\\"\\"\\"
  meetings: [Meeting!]
}

\\"\\"\\"
A single semester of the year. Generally is used in tandem with a year to represent a term.
\\"\\"\\"
enum Semester {
  \\"\\"\\"Fall Semester\\"\\"\\"
  F

  \\"\\"\\"Winter Semester\\"\\"\\"
  W

  \\"\\"\\"Summer Semester\\"\\"\\"
  S
  U
  P1
  P2
  P3
  P4
}

\\"\\"\\"
A school term, includes the term season which is summer, fall, or winter, as well as the year.
\\"\\"\\"
enum Term {
  W19
  S19
  F19
  W20
  S20
  F20
  W21
  S21
  F21
  W22
  S22
  F22
}
"
`;
